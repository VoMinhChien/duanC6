@page "/login"
@using System.Net;
@using System.ComponentModel.DataAnnotations;
@using System.Web
@using AsmShare.Models.ViewModels
@using Newtonsoft.Json
@layout LayOutDangKy;
@*@layout WebLayOut;*@
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISyncSessionStorageService sessionStorage
@inject Microsoft.Extensions.Configuration.IConfiguration config;
@inject IJSRuntime JSRuntime
	<link rel="icon" type="image/png" href="images/icons/favicon.ico"/>
<!--===============================================================================================-->
	<link rel="stylesheet" type="text/css" href="vendor/bootstrap/css/bootstrap.min.css">
<!--===============================================================================================-->
	<link rel="stylesheet" type="text/css" href="fonts/font-awesome-4.7.0/css/font-awesome.min.css">
<!--===============================================================================================-->
	<link rel="stylesheet" type="text/css" href="fonts/iconic/css/material-design-iconic-font.min.css">
<!--===============================================================================================-->
	<link rel="stylesheet" type="text/css" href="vendor/animate/animate.css">
<!--===============================================================================================-->	
	<link rel="stylesheet" type="text/css" href="vendor/css-hamburgers/hamburgers.min.css">
<!--===============================================================================================-->
	<link rel="stylesheet" type="text/css" href="vendor/animsition/css/animsition.min.css">
<!--===============================================================================================-->
	<link rel="stylesheet" type="text/css" href="vendor/select2/select2.min.css">
<!--===============================================================================================-->	
	<link rel="stylesheet" type="text/css" href="vendor/daterangepicker/daterangepicker.css">


<link href="css/main.css" rel="stylesheet">
<link href="css/util.css" rel="stylesheet">

 <div class="limiter">
		<div class="container-login100" style="background-image: url('Imagess/bg-01.jpg');">
			<div class="wrap-login100 p-l-55 p-r-55 p-t-65 p-b-54">
				
					<span class="login100-form-title p-b-49">
						Đăng Nhập
					</span>

					<div class="wrap-input100 validate-input m-b-23" >
						
						<input type="text" id="username" placeholder="Email" @bind="@email">
						
					</div>

					<div class="wrap-input100 validate-input" >
						
						<input type="password" placeholder="Password" @bind="@password" @onkeypress="Enter">
						
					</div>
					
					<div class="text-right p-t-8 p-b-31">
						<a href="#">
							Forgot password?
						</a>
					</div>
					
					<div class="container-login100-form-btn">
						<div class="wrap-login100-form-btn">
							<div class="login100-form-bgbtn"></div>
							

                            <button class="login100-form-btn" @onclick="CheckLogin">
                                Login
                            </button>
                            @if (!string.IsNullOrEmpty(error))
                            {
                                <div class="alert alert-danger mt-3 mb-0">@((MarkupString)error)</div>
                            }




						</div>
					</div>

					<div class="txt1 text-center p-t-54 p-b-20">
						<span>
							Or Sign Up Using
						</span>
					</div>

					<div class="flex-c-m">
						<a href="#" class="login100-social-item bg1">
							<i class="fa fa-facebook"></i>
						</a>

						<a href="#" class="login100-social-item bg2">
							<i class="fa fa-twitter"></i>
						</a>

						<a href="#" class="login100-social-item bg3">
							<i class="fa fa-google"></i>
						</a>
					</div>

					<div class="flex-col-c p-t-155">
						<span class="txt1 p-b-17">
							Or Sign Up Using
						</span>

						<a href="#" class="txt2">
							Sign Up
						</a>
					</div>
			
			</div>
		</div>
	</div>
	

	<div id="dropDownSelect1"></div>
	














@*
<div class="col-md-4 offset-md-3 mt-5">
    <div class="card">
        <h4 class="card-header">Đăng nhập</h4>
        <div class="card-body">
            <div class="form-group">
                <input type="text" id="username" placeholder="Email" @bind="@email" class="form-control" />
            </div>
            <div class="form-group">
                <input type="password" placeholder="Password" @bind="@password" @onkeypress="Enter" class="form-control" />
            </div>
            <button class="ml-md-auto btn btn-primary" @onclick="CheckLogin">
                Login
            </button>
            @if (!string.IsNullOrEmpty(error))
            {
                <div class="alert alert-danger mt-3 mb-0">@((MarkupString)error)</div>
            }
          
        </div>
    </div>
</div>*@

@code {
    private bool loading;
    private string error;

    string email = "";
    string password = "";
    string tenkh = "";
    private string name;
    protected override void OnInitialized()
    {
    }

    private string Encode(string param)
    {
        return HttpUtility.UrlEncode(param);
    }

    public void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            if (password != "")
            {
                CheckLogin();
            }
        }
    }

    private async Task CheckLogin()
    {
        error = "";
        if (email == "")
        {
            error = " - Bạn cần nhập email.";
        }
        if (password == "")
        {
            error += (error == "" ? "" : "<br/>") + " - Bạn cần nhập password.";
        }
        if (error == "")
        {

            var apiUrl = config.GetSection("API")["APIUrl"].ToString();
            using (var client = new HttpClient())
            {

                ViewWebLogin viewWebLogin = new ViewWebLogin() { Email = email, Password = password ,};  
                client.DefaultRequestHeaders.Add("Access-Control-Allow-Origin", "*");
                //client.DefaultRequestHeaders.Authorization =new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
                StringContent content = new StringContent(JsonConvert.SerializeObject(viewWebLogin), System.Text.Encoding.UTF8, "application/json");
                HttpResponseMessage response = await client.PostAsync(apiUrl + "Token", content);
                if (response.StatusCode != HttpStatusCode.OK)
                {
                    error += (error == "" ? "" : "<br/>") + " - Lỗi khi gọi API.";
                    //xu ly loi
                    //return Content(response.ToString());
                }
                else
                {
                    string apiResponse = await response.Content.ReadAsStringAsync();
                    var viewToken = Newtonsoft.Json.JsonConvert.DeserializeObject<ViewToken>(apiResponse);
                    var accessToken = viewToken.Token;
                    sessionStorage.SetItem("KhachhangId", viewToken.KhachHang_Id);
                    sessionStorage.SetItem("KhachhangName",viewToken.KhachHang_Name);
                    sessionStorage.SetItem("KhachhangSdt",viewToken.KhachHang_sdt);
                    sessionStorage.SetItem("Email", email);
                    sessionStorage.SetItem("AccessToken", accessToken);

                   
                    
                    await JSRuntime.InvokeAsync<object>("refreshMenu", new{email = email});
                    //await JSRuntime.InvokeAsync<object>("CalledJSFunctionWithParameter", "Jignesh Trivedi");
                    

                    NavigationManager.NavigateTo("/");

                    
                }
            }
        }
    }
}

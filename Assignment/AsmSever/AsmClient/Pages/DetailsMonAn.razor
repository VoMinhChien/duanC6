@page "/detailsmonan/{id}"
@using AsmShare.Models;
@using AsmShare.Models.ViewModels
@using AsmShare.Services
@using Net.ConnectCode.Barcode;
    
@inject Blazored.SessionStorage.ISyncSessionStorageService sessionStorage
@inject Microsoft.Extensions.Configuration.IConfiguration config;
@*@inject Blazored.SessionStorage.ISyncSessionStorageService sessionStorage*@
@layout WebLayOut;

    <style>
    .list-product {
        margin: auto;
        display: flex;
        flex-wrap: wrap;
    }

    .product {
        margin-top: 10px;
        margin-right: 10px;
        width: 205px;
    }

    .img {
        width: 150px;
        display: block;
        margin: auto;
    }

    .title {
        color: #0e0e0e;
        display: block;
        font-size: 15px;
        font-weight: bold;
        text-align: center;
        height: 60px;
    }

    .field-price {
        font-size: 24px;
        color: #d50000;
        margin-bottom: 15px;
        font-weight: 700;
        text-align: center;
    }

    .viewProduct, .addProduct {
        border: 0;
        font-weight: 700;
        padding: 9px 5px;
        background: #ffd800;
        -webkit-border-radius: 5px;
        -moz-border-radius: 5px;
        border-radius: 5px;
        display: block;
        width: 186px;
        margin: 0 auto;
        color: #0e0e0e;
    }

    .addProduct {
        margin-left: 2px;
    }
</style>

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">

<link rel="stylesheet" type="text/css" href="//fonts.googleapis.com/css?family=Roboto:100,300,300i,400,500,600,700,900%7CRaleway:500">
    <link rel="stylesheet" href="cssSP/bootstrap.css">
    <link rel="stylesheet" href="cssSP/fonts.css">
     <link rel="stylesheet" href="cssSP/style.css">


<section class="h-100 gradient-custom">
    <div class="container py-5">
        <div class="row d-flex justify-content-center my-4">
            <div class="col-md-8">
                <div class="card mb-4">
                     <div class="card-header py-3">
                         <h5 class="mb-0">Chi tiết món ăn</h5>
                     </div>
                      <div class="card-body">
                          <div class="row">

                                        <div class="col-lg-3 col-md-12 mb-4 mb-lg-0">
                                           <div class="bg-image hover-overlay hover-zoom ripple rounded" data-mdb-ripple-color="light">
                                                @{
                                                 temp = imgUrl + list.MonAn_Image;
                                                }
                     
                                                 <img src="@temp" class="product-figure" style="min-width:200px;width:200px;height:200px;border-radius:3px"/>
                                                <a href="#!">
                                                  <div class="mask" style="background-color: rgba(251, 251, 251, 0.2)"></div>
                                                </a>
                                          </div>
                                      </div>

                               <ul class="list-group list-group-flush">
                <li
                  class="list-group-item d-flex justify-content-between align-items-center border-0 px-0 pb-0">
                  Tên Món
                  <span>@list.MonAn_Name</span>
                </li>
                <li class="list-group-item d-flex justify-content-between align-items-center px-0">
                  Mô tả
                  <span>@list.MonAn_MoTa</span>
                </li>
                <li
                  class="list-group-item d-flex justify-content-between align-items-center border-0 px-0 mb-3">
                  <div>
                    <strong>Giá Tiền</strong>
                    
                  </div>
                  <span><strong>@list.MonAn_Gia VND</strong></span>
                </li>


                <li class="list-group-item d-flex justify-content-between align-items-center border-0 px-0 mb-3">
                  <div>
                    <strong>Barcode</strong>
                    
                  </div>
                  <span id="barcode">@barcode</span>
                  <div>
                      <span id="barcode_text">@barcode_text</span>
                  </div>
                   
                </li>
              </ul>
                         
                          </div>
                      </div>
                </div>
            </div>
            <div class="col-md-4">        
                <div class="button-wrap"><a class="button button-xs button-primary button-winona"  onmouseup="addCart(@list.MonAn_Id);" @onclick="() => AddCart(list.MonAn_Id)" style="width:230px">Thêm vào Giỏ</a></div>
                 <div class="button-wrap"><a class="button button-xs button-primary button-winona" href="/"  style="width:230px">Trang Chủ</a></div>
        </div>
        
        </div>
    </div>
</section>


<link rel="stylesheet" type="text/css" href="css/StyleSheet.css">

@code {
    [Parameter]
    public string id { get; set; }
    private string Tieude = "";
    protected string temp = "";
    protected string imgUrl = "";
    string barcode = "";
    string barcode_text = "";
   // public MonAn monAns;
    // public MonAn monanid;
    public MonAn list;
    //public List<ChiTietDonHang> listDonhang = new List<ChiTietDonHang>();

    protected override async Task OnInitializedAsync()

    {

        var apiUrl = config.GetSection("API")["APIUrl"].ToString();
        imgUrl = config.GetSection("API")["ImgUrl"].ToString();
        var accessToken = sessionStorage.GetItem<string>("AccessToken");
        list = new MonAn();
        
        using (var client = new HttpClient())
        {

            client.BaseAddress = new Uri(apiUrl);
            using (var response = await client.GetAsync("https://localhost:44345/api/monandetail/"+id))
            {                 
                string apiResponse = await response.Content.ReadAsStringAsync();

                list = Newtonsoft.Json.JsonConvert.DeserializeObject<MonAn>(apiResponse);

            }
        }
        
        BarcodeFonts bcf = new BarcodeFonts();
        bcf.BarcodeType = BarcodeFonts.BarcodeEnum.Code39;		
        bcf.CheckDigit = BarcodeFonts.YesNoEnum.Yes;
        bcf.Data = list.MonAn_Gia.ToString();
        bcf.encode();
        barcode = bcf.EncodedData;
        barcode_text = bcf.HumanText;

    }
    
    void GenerateBarcode()
    {
       
    }
   private void AddCart(int id)
    {
        //var cart = HttpContext.Session.GetString("cart");//get key cart
        var cart = sessionStorage.GetItem<string>("cart");//get key cart
        if (cart == null)
        {

            //var monAn = monAns.Where(u=>u.MonAn_Id==id).FirstOrDefault();
            var monan = list;
            monan.MonAn_Id = id;
            List<CartItem> listCart = new List<CartItem>()
                {
                    new CartItem
                    {
                        MonAn = monan,
                        Quantity = 1,
                        Sotien= monan.MonAn_Gia,
                        
                    }
            };

           AsmShare.Models.ViewModels.Cart giohang = new AsmShare.Models.ViewModels.Cart() {
                ListViewCart = listCart, Tongtien = Tinhtien(listCart) };

            sessionStorage.SetItem("cart", JsonConvert.SerializeObject(giohang));
            //HttpContext.Session.SetString("cart", JsonConvert.SerializeObject(listCart));
        }
        else
        {
             var monan = list;
            monan.MonAn_Id = id;

            AsmShare.Models.ViewModels.Cart giohang = JsonConvert.DeserializeObject<AsmShare.Models.ViewModels.Cart>(cart);
            //List <ViewCart> dataCart = JsonConvert.DeserializeObject<List<ViewCart>>(cart);
            bool check = true;
            for (int i = 0; i < giohang.ListViewCart.Count; i++)
            {
                if (giohang.ListViewCart[i].MonAn.MonAn_Id == id)
                {
                    giohang.ListViewCart[i].Quantity++;
                    giohang.ListViewCart[i].Sotien = monan.MonAn_Gia * giohang.ListViewCart[i].Quantity;
                    check = false;
                }
            }

            if (check)
            {
                //var monAn = monAns.Where(u => u.MonAnID == id).FirstOrDefault();
                giohang.ListViewCart.Add(new CartItem
                {
                    MonAn = monan,
                    Quantity = 1,
                    Sotien= monan.MonAn_Gia*1
                    
                    
                });
            }
            giohang.Tongtien = Tinhtien(giohang.ListViewCart);
            sessionStorage.SetItem("cart", JsonConvert.SerializeObject(giohang));

            //HttpContext.Session.SetString("cart", JsonConvert.SerializeObject(dataCart));
        }
    }

    private float Tinhtien(List<CartItem> listCart)
    {
        float tongtien = 0;
        if (listCart != null)
        {
            for (int i = 0; i < listCart.Count; i++)
            {
                tongtien += listCart[i].Sotien;
            }
        }
        return tongtien;
    }
         

}

